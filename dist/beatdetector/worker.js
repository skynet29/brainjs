function getPeaksAtThreshold(e,o,t){console.log("getPeaksAtThreshold",o);const s=[],n=e.length;for(let l=0;l<n;)e[l]>o&&(s.push(l),l+=t/4-1),l++;return s}function countIntervalsBetweenNearbyPeaks(e){console.log("countIntervalsBetweenNearbyPeaks",e);const o=[];return e.forEach((t,s)=>{const n=Math.min(e.length-s,10);for(let l=1;l<n;l++){const n=e[s+l]-t;o.some(e=>e.interval===n&&(e.peaks.push(t),console.log("interval",e),!0))||o.push({interval:n,peaks:[t]})}}),o}function trunc(e){return Math.trunc(10*e)/10}function groupNeighborsByTempo(e,o){console.log("groupNeighborsByTempo",e);const t=[];return e.forEach((e,s)=>{console.log(s,e);let n=60/(e.interval/o);for(console.log("theoreticalTempo",n);n<90;)n*=2;for(;n>160;)n/=2;console.log("theoreticalTempo",n);let l=e.peaks.length,a=!1;t.forEach(o=>{if(o.tempo===n&&(o.score+=e.peaks.length,o.peaks=o.peaks.concat(e.peaks),a=!0),o.tempo>n-.5&&o.tempo<n+.5){const e=(1-2*Math.abs(o.tempo-n))*o.peaks.length;l+=e,o.score+=e}}),a||t.push({tempo:n,score:l,peaks:e.peaks})}),t}function getMaximumValue(e){let o=0;const t=e.length;for(let s=0;s<t;s+=1)e[s]>o&&(o=e[s]);return o}self.onmessage=function(e){console.log("Message received:",e.data);const{channelData:o,sampleRate:t}=e.data,s=computeTempo(o,t);console.log("tempos",s),self.postMessage(s[0])};const MINUMUM_NUMBER_OF_PEAKS=30;function computeTempo(e,o){const t=getMaximumValue(e);console.log("maximumValue",t);const s=.3*t;let n=[],l=t-.05*t;if(console.log("threshold",l),t>.25)for(;n.length<MINUMUM_NUMBER_OF_PEAKS&&l>=s;)n=getPeaksAtThreshold(e,l,o),console.log("peaks length",n.length),l-=.05*t;const a=groupNeighborsByTempo(countIntervalsBetweenNearbyPeaks(n),o);return a.sort((e,o)=>o.score-e.score),a}